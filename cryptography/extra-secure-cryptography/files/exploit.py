

from Crypto.PublicKey import ECC
from Crypto.Cipher import AES
from pwn import *
import codecs

k = 115792089210356248762697446949407573529996955224135760342422259061068512044369
inv_e = 22307831462563435312564026508617675288523321935072585845594863492014585133981
e = 1443

P = ECC.import_key(open('P.pem','rt').read()).pointQ
Q = ECC.import_key(open('Q.pem','rt').read()).pointQ

# p = process(['python', 'soal.py'])
p  = remote("3.0.58.217", 2401)

def send_msg_2_alice(msg):
	p.sendlineafter('Choice:', '1')
	p.sendlineafter('Alice:', msg)

def intercept():
	p.sendlineafter('Choice:', '2')

# intercept()
send_msg_2_alice('asds')

p.recvuntil('=')
r = int(p.recvuntil('\n'))
print(r)
p.recvuntil('(')
Kbx = int(p.recvuntil(',')[:-1])
Kby = int(p.recvuntil(')')[:-1])
pubkey = ECC.EccPoint(Kbx, Kby)
rQ = ECC.EccPoint(r, input("y val: "))
next_rand_val = (((inv_e*rQ).x*P).x*Q).x
shared_key = (next_rand_val*pubkey).x
shared_key = shared_key.to_bytes(32)

intercept()

p.recvuntil("Intercepted Message:  b'")
enc = p.recvuntil("'")[:-1]
print(enc)
enc = codecs.decode(enc, 'hex')[32:]
print(enc)
print(len(enc))

iv = enc[:16]
enc = enc[16:]

aes = AES.new(shared_key, AES.MODE_CBC, iv)
print(aes.decrypt(enc))


p.interactive()
p.close()

